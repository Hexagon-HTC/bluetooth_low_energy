// Autogenerated from Pigeon (v18.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "my_api.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace bluetooth_low_energy_windows {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
    return FlutterError(
        "channel-error",
        "Unable to establish connection on channel: '" + channel_name + "'.",
        EncodableValue(""));
}

// MyManufacturerSpecificDataArgs

MyManufacturerSpecificDataArgs::MyManufacturerSpecificDataArgs(
  int64_t id_args,
  const std::vector<uint8_t>& data_args)
 : id_args_(id_args),
    data_args_(data_args) {}

int64_t MyManufacturerSpecificDataArgs::id_args() const {
  return id_args_;
}

void MyManufacturerSpecificDataArgs::set_id_args(int64_t value_arg) {
  id_args_ = value_arg;
}


const std::vector<uint8_t>& MyManufacturerSpecificDataArgs::data_args() const {
  return data_args_;
}

void MyManufacturerSpecificDataArgs::set_data_args(const std::vector<uint8_t>& value_arg) {
  data_args_ = value_arg;
}


EncodableList MyManufacturerSpecificDataArgs::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(id_args_));
  list.push_back(EncodableValue(data_args_));
  return list;
}

MyManufacturerSpecificDataArgs MyManufacturerSpecificDataArgs::FromEncodableList(const EncodableList& list) {
  MyManufacturerSpecificDataArgs decoded(
    list[0].LongValue(),
    std::get<std::vector<uint8_t>>(list[1]));
  return decoded;
}

// MyAdvertisementArgs

MyAdvertisementArgs::MyAdvertisementArgs(
  const EncodableList& service_u_u_i_ds_args,
  const EncodableMap& service_data_args)
 : service_u_u_i_ds_args_(service_u_u_i_ds_args),
    service_data_args_(service_data_args) {}

MyAdvertisementArgs::MyAdvertisementArgs(
  const std::string* name_args,
  const EncodableList& service_u_u_i_ds_args,
  const EncodableMap& service_data_args,
  const MyManufacturerSpecificDataArgs* manufacturer_specific_data_args)
 : name_args_(name_args ? std::optional<std::string>(*name_args) : std::nullopt),
    service_u_u_i_ds_args_(service_u_u_i_ds_args),
    service_data_args_(service_data_args),
    manufacturer_specific_data_args_(manufacturer_specific_data_args ? std::make_unique<MyManufacturerSpecificDataArgs>(*manufacturer_specific_data_args) : nullptr) {}

MyAdvertisementArgs::MyAdvertisementArgs(const MyAdvertisementArgs& other)
 : name_args_(other.name_args_ ? std::optional<std::string>(*other.name_args_) : std::nullopt),
    service_u_u_i_ds_args_(other.service_u_u_i_ds_args_),
    service_data_args_(other.service_data_args_),
    manufacturer_specific_data_args_(other.manufacturer_specific_data_args_ ? std::make_unique<MyManufacturerSpecificDataArgs>(*other.manufacturer_specific_data_args_) : nullptr) {}

MyAdvertisementArgs& MyAdvertisementArgs::operator=(const MyAdvertisementArgs& other) {
  name_args_ = other.name_args_;
  service_u_u_i_ds_args_ = other.service_u_u_i_ds_args_;
  service_data_args_ = other.service_data_args_;
  manufacturer_specific_data_args_ = other.manufacturer_specific_data_args_ ? std::make_unique<MyManufacturerSpecificDataArgs>(*other.manufacturer_specific_data_args_) : nullptr;
  return *this;
}

const std::string* MyAdvertisementArgs::name_args() const {
  return name_args_ ? &(*name_args_) : nullptr;
}

void MyAdvertisementArgs::set_name_args(const std::string_view* value_arg) {
  name_args_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void MyAdvertisementArgs::set_name_args(std::string_view value_arg) {
  name_args_ = value_arg;
}


const EncodableList& MyAdvertisementArgs::service_u_u_i_ds_args() const {
  return service_u_u_i_ds_args_;
}

void MyAdvertisementArgs::set_service_u_u_i_ds_args(const EncodableList& value_arg) {
  service_u_u_i_ds_args_ = value_arg;
}


const EncodableMap& MyAdvertisementArgs::service_data_args() const {
  return service_data_args_;
}

void MyAdvertisementArgs::set_service_data_args(const EncodableMap& value_arg) {
  service_data_args_ = value_arg;
}


const MyManufacturerSpecificDataArgs* MyAdvertisementArgs::manufacturer_specific_data_args() const {
  return manufacturer_specific_data_args_.get();
}

void MyAdvertisementArgs::set_manufacturer_specific_data_args(const MyManufacturerSpecificDataArgs* value_arg) {
  manufacturer_specific_data_args_ = value_arg ? std::make_unique<MyManufacturerSpecificDataArgs>(*value_arg) : nullptr;
}

void MyAdvertisementArgs::set_manufacturer_specific_data_args(const MyManufacturerSpecificDataArgs& value_arg) {
  manufacturer_specific_data_args_ = std::make_unique<MyManufacturerSpecificDataArgs>(value_arg);
}


EncodableList MyAdvertisementArgs::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(name_args_ ? EncodableValue(*name_args_) : EncodableValue());
  list.push_back(EncodableValue(service_u_u_i_ds_args_));
  list.push_back(EncodableValue(service_data_args_));
  list.push_back(manufacturer_specific_data_args_ ? CustomEncodableValue(*manufacturer_specific_data_args_) : EncodableValue());
  return list;
}

MyAdvertisementArgs MyAdvertisementArgs::FromEncodableList(const EncodableList& list) {
  MyAdvertisementArgs decoded(
    std::get<EncodableList>(list[1]),
    std::get<EncodableMap>(list[2]));
  auto& encodable_name_args = list[0];
  if (!encodable_name_args.IsNull()) {
    decoded.set_name_args(std::get<std::string>(encodable_name_args));
  }
  auto& encodable_manufacturer_specific_data_args = list[3];
  if (!encodable_manufacturer_specific_data_args.IsNull()) {
    decoded.set_manufacturer_specific_data_args(std::any_cast<const MyManufacturerSpecificDataArgs&>(std::get<CustomEncodableValue>(encodable_manufacturer_specific_data_args)));
  }
  return decoded;
}

// MyPeripheralArgs

MyPeripheralArgs::MyPeripheralArgs(int64_t address_args)
 : address_args_(address_args) {}

int64_t MyPeripheralArgs::address_args() const {
  return address_args_;
}

void MyPeripheralArgs::set_address_args(int64_t value_arg) {
  address_args_ = value_arg;
}


EncodableList MyPeripheralArgs::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(EncodableValue(address_args_));
  return list;
}

MyPeripheralArgs MyPeripheralArgs::FromEncodableList(const EncodableList& list) {
  MyPeripheralArgs decoded(
    list[0].LongValue());
  return decoded;
}

// MyGATTDescriptorArgs

MyGATTDescriptorArgs::MyGATTDescriptorArgs(
  int64_t handle_args,
  const std::string& uuid_args)
 : handle_args_(handle_args),
    uuid_args_(uuid_args) {}

int64_t MyGATTDescriptorArgs::handle_args() const {
  return handle_args_;
}

void MyGATTDescriptorArgs::set_handle_args(int64_t value_arg) {
  handle_args_ = value_arg;
}


const std::string& MyGATTDescriptorArgs::uuid_args() const {
  return uuid_args_;
}

void MyGATTDescriptorArgs::set_uuid_args(std::string_view value_arg) {
  uuid_args_ = value_arg;
}


EncodableList MyGATTDescriptorArgs::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(handle_args_));
  list.push_back(EncodableValue(uuid_args_));
  return list;
}

MyGATTDescriptorArgs MyGATTDescriptorArgs::FromEncodableList(const EncodableList& list) {
  MyGATTDescriptorArgs decoded(
    list[0].LongValue(),
    std::get<std::string>(list[1]));
  return decoded;
}

// MyGATTCharacteristicArgs

MyGATTCharacteristicArgs::MyGATTCharacteristicArgs(
  int64_t handle_args,
  const std::string& uuid_args,
  const EncodableList& property_numbers_args,
  const EncodableList& descriptors_args)
 : handle_args_(handle_args),
    uuid_args_(uuid_args),
    property_numbers_args_(property_numbers_args),
    descriptors_args_(descriptors_args) {}

int64_t MyGATTCharacteristicArgs::handle_args() const {
  return handle_args_;
}

void MyGATTCharacteristicArgs::set_handle_args(int64_t value_arg) {
  handle_args_ = value_arg;
}


const std::string& MyGATTCharacteristicArgs::uuid_args() const {
  return uuid_args_;
}

void MyGATTCharacteristicArgs::set_uuid_args(std::string_view value_arg) {
  uuid_args_ = value_arg;
}


const EncodableList& MyGATTCharacteristicArgs::property_numbers_args() const {
  return property_numbers_args_;
}

void MyGATTCharacteristicArgs::set_property_numbers_args(const EncodableList& value_arg) {
  property_numbers_args_ = value_arg;
}


const EncodableList& MyGATTCharacteristicArgs::descriptors_args() const {
  return descriptors_args_;
}

void MyGATTCharacteristicArgs::set_descriptors_args(const EncodableList& value_arg) {
  descriptors_args_ = value_arg;
}


EncodableList MyGATTCharacteristicArgs::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(EncodableValue(handle_args_));
  list.push_back(EncodableValue(uuid_args_));
  list.push_back(EncodableValue(property_numbers_args_));
  list.push_back(EncodableValue(descriptors_args_));
  return list;
}

MyGATTCharacteristicArgs MyGATTCharacteristicArgs::FromEncodableList(const EncodableList& list) {
  MyGATTCharacteristicArgs decoded(
    list[0].LongValue(),
    std::get<std::string>(list[1]),
    std::get<EncodableList>(list[2]),
    std::get<EncodableList>(list[3]));
  return decoded;
}

// MyGATTServiceArgs

MyGATTServiceArgs::MyGATTServiceArgs(
  int64_t handle_args,
  const std::string& uuid_args,
  const EncodableList& characteristics_args)
 : handle_args_(handle_args),
    uuid_args_(uuid_args),
    characteristics_args_(characteristics_args) {}

int64_t MyGATTServiceArgs::handle_args() const {
  return handle_args_;
}

void MyGATTServiceArgs::set_handle_args(int64_t value_arg) {
  handle_args_ = value_arg;
}


const std::string& MyGATTServiceArgs::uuid_args() const {
  return uuid_args_;
}

void MyGATTServiceArgs::set_uuid_args(std::string_view value_arg) {
  uuid_args_ = value_arg;
}


const EncodableList& MyGATTServiceArgs::characteristics_args() const {
  return characteristics_args_;
}

void MyGATTServiceArgs::set_characteristics_args(const EncodableList& value_arg) {
  characteristics_args_ = value_arg;
}


EncodableList MyGATTServiceArgs::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(EncodableValue(handle_args_));
  list.push_back(EncodableValue(uuid_args_));
  list.push_back(EncodableValue(characteristics_args_));
  return list;
}

MyGATTServiceArgs MyGATTServiceArgs::FromEncodableList(const EncodableList& list) {
  MyGATTServiceArgs decoded(
    list[0].LongValue(),
    std::get<std::string>(list[1]),
    std::get<EncodableList>(list[2]));
  return decoded;
}


MyCentralManagerHostAPICodecSerializer::MyCentralManagerHostAPICodecSerializer() {}

EncodableValue MyCentralManagerHostAPICodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(MyGATTCharacteristicArgs::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(MyGATTDescriptorArgs::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 130:
      return CustomEncodableValue(MyGATTServiceArgs::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void MyCentralManagerHostAPICodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(MyGATTCharacteristicArgs)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<MyGATTCharacteristicArgs>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(MyGATTDescriptorArgs)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<MyGATTDescriptorArgs>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(MyGATTServiceArgs)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<MyGATTServiceArgs>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by MyCentralManagerHostAPI.
const flutter::StandardMessageCodec& MyCentralManagerHostAPI::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&MyCentralManagerHostAPICodecSerializer::GetInstance());
}

// Sets up an instance of `MyCentralManagerHostAPI` to handle messages through the `binary_messenger`.
void MyCentralManagerHostAPI::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  MyCentralManagerHostAPI* api) {
  MyCentralManagerHostAPI::SetUp(binary_messenger, api, "");
}

void MyCentralManagerHostAPI::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  MyCentralManagerHostAPI* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.initialize" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          api->Initialize([reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.getState" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          ErrorOr<MyBluetoothLowEnergyStateArgs> output = api->GetState();
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue((int) std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.startDiscovery" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_service_u_u_i_ds_args_arg = args.at(0);
          if (encodable_service_u_u_i_ds_args_arg.IsNull()) {
            reply(WrapError("service_u_u_i_ds_args_arg unexpectedly null."));
            return;
          }
          const auto& service_u_u_i_ds_args_arg = std::get<EncodableList>(encodable_service_u_u_i_ds_args_arg);
          std::optional<FlutterError> output = api->StartDiscovery(service_u_u_i_ds_args_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.stopDiscovery" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          std::optional<FlutterError> output = api->StopDiscovery();
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.connect" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_address_args_arg = args.at(0);
          if (encodable_address_args_arg.IsNull()) {
            reply(WrapError("address_args_arg unexpectedly null."));
            return;
          }
          const int64_t address_args_arg = encodable_address_args_arg.LongValue();
          api->Connect(address_args_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.disconnect" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_address_args_arg = args.at(0);
          if (encodable_address_args_arg.IsNull()) {
            reply(WrapError("address_args_arg unexpectedly null."));
            return;
          }
          const int64_t address_args_arg = encodable_address_args_arg.LongValue();
          std::optional<FlutterError> output = api->Disconnect(address_args_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.getMTU" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_address_args_arg = args.at(0);
          if (encodable_address_args_arg.IsNull()) {
            reply(WrapError("address_args_arg unexpectedly null."));
            return;
          }
          const int64_t address_args_arg = encodable_address_args_arg.LongValue();
          ErrorOr<int64_t> output = api->GetMTU(address_args_arg);
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.discoverServices" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_address_args_arg = args.at(0);
          if (encodable_address_args_arg.IsNull()) {
            reply(WrapError("address_args_arg unexpectedly null."));
            return;
          }
          const int64_t address_args_arg = encodable_address_args_arg.LongValue();
          api->DiscoverServices(address_args_arg, [reply](ErrorOr<EncodableList>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.discoverCharacteristics" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_address_args_arg = args.at(0);
          if (encodable_address_args_arg.IsNull()) {
            reply(WrapError("address_args_arg unexpectedly null."));
            return;
          }
          const int64_t address_args_arg = encodable_address_args_arg.LongValue();
          const auto& encodable_handle_args_arg = args.at(1);
          if (encodable_handle_args_arg.IsNull()) {
            reply(WrapError("handle_args_arg unexpectedly null."));
            return;
          }
          const int64_t handle_args_arg = encodable_handle_args_arg.LongValue();
          api->DiscoverCharacteristics(address_args_arg, handle_args_arg, [reply](ErrorOr<EncodableList>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.discoverDescriptors" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_address_args_arg = args.at(0);
          if (encodable_address_args_arg.IsNull()) {
            reply(WrapError("address_args_arg unexpectedly null."));
            return;
          }
          const int64_t address_args_arg = encodable_address_args_arg.LongValue();
          const auto& encodable_handle_args_arg = args.at(1);
          if (encodable_handle_args_arg.IsNull()) {
            reply(WrapError("handle_args_arg unexpectedly null."));
            return;
          }
          const int64_t handle_args_arg = encodable_handle_args_arg.LongValue();
          api->DiscoverDescriptors(address_args_arg, handle_args_arg, [reply](ErrorOr<EncodableList>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.readCharacteristic" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_address_args_arg = args.at(0);
          if (encodable_address_args_arg.IsNull()) {
            reply(WrapError("address_args_arg unexpectedly null."));
            return;
          }
          const int64_t address_args_arg = encodable_address_args_arg.LongValue();
          const auto& encodable_handle_args_arg = args.at(1);
          if (encodable_handle_args_arg.IsNull()) {
            reply(WrapError("handle_args_arg unexpectedly null."));
            return;
          }
          const int64_t handle_args_arg = encodable_handle_args_arg.LongValue();
          api->ReadCharacteristic(address_args_arg, handle_args_arg, [reply](ErrorOr<std::vector<uint8_t>>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.writeCharacteristic" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_address_args_arg = args.at(0);
          if (encodable_address_args_arg.IsNull()) {
            reply(WrapError("address_args_arg unexpectedly null."));
            return;
          }
          const int64_t address_args_arg = encodable_address_args_arg.LongValue();
          const auto& encodable_handle_args_arg = args.at(1);
          if (encodable_handle_args_arg.IsNull()) {
            reply(WrapError("handle_args_arg unexpectedly null."));
            return;
          }
          const int64_t handle_args_arg = encodable_handle_args_arg.LongValue();
          const auto& encodable_value_args_arg = args.at(2);
          if (encodable_value_args_arg.IsNull()) {
            reply(WrapError("value_args_arg unexpectedly null."));
            return;
          }
          const auto& value_args_arg = std::get<std::vector<uint8_t>>(encodable_value_args_arg);
          const auto& encodable_type_args_arg = args.at(3);
          if (encodable_type_args_arg.IsNull()) {
            reply(WrapError("type_args_arg unexpectedly null."));
            return;
          }
          const MyGATTCharacteristicWriteTypeArgs& type_args_arg = (MyGATTCharacteristicWriteTypeArgs)encodable_type_args_arg.LongValue();
          api->WriteCharacteristic(address_args_arg, handle_args_arg, value_args_arg, type_args_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.setCharacteristicNotifyState" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_address_args_arg = args.at(0);
          if (encodable_address_args_arg.IsNull()) {
            reply(WrapError("address_args_arg unexpectedly null."));
            return;
          }
          const int64_t address_args_arg = encodable_address_args_arg.LongValue();
          const auto& encodable_handle_args_arg = args.at(1);
          if (encodable_handle_args_arg.IsNull()) {
            reply(WrapError("handle_args_arg unexpectedly null."));
            return;
          }
          const int64_t handle_args_arg = encodable_handle_args_arg.LongValue();
          const auto& encodable_state_args_arg = args.at(2);
          if (encodable_state_args_arg.IsNull()) {
            reply(WrapError("state_args_arg unexpectedly null."));
            return;
          }
          const MyGATTCharacteristicNotifyStateArgs& state_args_arg = (MyGATTCharacteristicNotifyStateArgs)encodable_state_args_arg.LongValue();
          api->SetCharacteristicNotifyState(address_args_arg, handle_args_arg, state_args_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.readDescriptor" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_address_args_arg = args.at(0);
          if (encodable_address_args_arg.IsNull()) {
            reply(WrapError("address_args_arg unexpectedly null."));
            return;
          }
          const int64_t address_args_arg = encodable_address_args_arg.LongValue();
          const auto& encodable_handle_args_arg = args.at(1);
          if (encodable_handle_args_arg.IsNull()) {
            reply(WrapError("handle_args_arg unexpectedly null."));
            return;
          }
          const int64_t handle_args_arg = encodable_handle_args_arg.LongValue();
          api->ReadDescriptor(address_args_arg, handle_args_arg, [reply](ErrorOr<std::vector<uint8_t>>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.writeDescriptor" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_address_args_arg = args.at(0);
          if (encodable_address_args_arg.IsNull()) {
            reply(WrapError("address_args_arg unexpectedly null."));
            return;
          }
          const int64_t address_args_arg = encodable_address_args_arg.LongValue();
          const auto& encodable_handle_args_arg = args.at(1);
          if (encodable_handle_args_arg.IsNull()) {
            reply(WrapError("handle_args_arg unexpectedly null."));
            return;
          }
          const int64_t handle_args_arg = encodable_handle_args_arg.LongValue();
          const auto& encodable_value_args_arg = args.at(2);
          if (encodable_value_args_arg.IsNull()) {
            reply(WrapError("value_args_arg unexpectedly null."));
            return;
          }
          const auto& value_args_arg = std::get<std::vector<uint8_t>>(encodable_value_args_arg);
          api->WriteDescriptor(address_args_arg, handle_args_arg, value_args_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue MyCentralManagerHostAPI::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue MyCentralManagerHostAPI::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}


MyCentralManagerFlutterAPICodecSerializer::MyCentralManagerFlutterAPICodecSerializer() {}

EncodableValue MyCentralManagerFlutterAPICodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(MyAdvertisementArgs::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(MyManufacturerSpecificDataArgs::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 130:
      return CustomEncodableValue(MyPeripheralArgs::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void MyCentralManagerFlutterAPICodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(MyAdvertisementArgs)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<MyAdvertisementArgs>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(MyManufacturerSpecificDataArgs)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<MyManufacturerSpecificDataArgs>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(MyPeripheralArgs)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<MyPeripheralArgs>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

// Generated class from Pigeon that represents Flutter messages that can be called from C++.
MyCentralManagerFlutterAPI::MyCentralManagerFlutterAPI(flutter::BinaryMessenger* binary_messenger)
 : binary_messenger_(binary_messenger),
    message_channel_suffix_("") {}

MyCentralManagerFlutterAPI::MyCentralManagerFlutterAPI(
  flutter::BinaryMessenger* binary_messenger,
  const std::string& message_channel_suffix)
 : binary_messenger_(binary_messenger),
    message_channel_suffix_(message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "") {}

const flutter::StandardMessageCodec& MyCentralManagerFlutterAPI::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&MyCentralManagerFlutterAPICodecSerializer::GetInstance());
}

void MyCentralManagerFlutterAPI::OnStateChanged(
  const MyBluetoothLowEnergyStateArgs& state_args_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onStateChanged" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    EncodableValue((int)state_args_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void MyCentralManagerFlutterAPI::OnDiscovered(
  const MyPeripheralArgs& peripheral_args_arg,
  int64_t rssi_args_arg,
  const MyAdvertisementArgs& advertisement_args_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onDiscovered" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(peripheral_args_arg),
    EncodableValue(rssi_args_arg),
    CustomEncodableValue(advertisement_args_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void MyCentralManagerFlutterAPI::OnConnectionStateChanged(
  int64_t address_args_arg,
  const MyConnectionStateArgs& state_args_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onConnectionStateChanged" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    EncodableValue(address_args_arg),
    EncodableValue((int)state_args_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void MyCentralManagerFlutterAPI::OnMTUChanged(
  int64_t address_args_arg,
  int64_t mtu_args_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onMTUChanged" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    EncodableValue(address_args_arg),
    EncodableValue(mtu_args_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void MyCentralManagerFlutterAPI::OnCharacteristicNotified(
  int64_t address_args_arg,
  int64_t handle_args_arg,
  const std::vector<uint8_t>& value_args_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onCharacteristicNotified" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    EncodableValue(address_args_arg),
    EncodableValue(handle_args_arg),
    EncodableValue(value_args_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

}  // namespace bluetooth_low_energy_windows
