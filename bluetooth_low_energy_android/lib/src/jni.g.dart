// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: android.bluetooth.BluetoothGatt
class BluetoothGatt extends jni.JObject {
  @override
  late final jni.JObjType<BluetoothGatt> $type = type;

  BluetoothGatt.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"android/bluetooth/BluetoothGatt");

  /// The type which includes information such as the signature of this class.
  static const type = $BluetoothGattType();

  /// from: static public final int CONNECTION_PRIORITY_BALANCED
  static const CONNECTION_PRIORITY_BALANCED = 0;

  /// from: static public final int CONNECTION_PRIORITY_DCK
  static const CONNECTION_PRIORITY_DCK = 3;

  /// from: static public final int CONNECTION_PRIORITY_HIGH
  static const CONNECTION_PRIORITY_HIGH = 1;

  /// from: static public final int CONNECTION_PRIORITY_LOW_POWER
  static const CONNECTION_PRIORITY_LOW_POWER = 2;

  /// from: static public final int GATT_CONNECTION_CONGESTED
  static const GATT_CONNECTION_CONGESTED = 143;

  /// from: static public final int GATT_FAILURE
  static const GATT_FAILURE = 257;

  /// from: static public final int GATT_INSUFFICIENT_AUTHENTICATION
  static const GATT_INSUFFICIENT_AUTHENTICATION = 5;

  /// from: static public final int GATT_INSUFFICIENT_AUTHORIZATION
  static const GATT_INSUFFICIENT_AUTHORIZATION = 8;

  /// from: static public final int GATT_INSUFFICIENT_ENCRYPTION
  static const GATT_INSUFFICIENT_ENCRYPTION = 15;

  /// from: static public final int GATT_INVALID_ATTRIBUTE_LENGTH
  static const GATT_INVALID_ATTRIBUTE_LENGTH = 13;

  /// from: static public final int GATT_INVALID_OFFSET
  static const GATT_INVALID_OFFSET = 7;

  /// from: static public final int GATT_READ_NOT_PERMITTED
  static const GATT_READ_NOT_PERMITTED = 2;

  /// from: static public final int GATT_REQUEST_NOT_SUPPORTED
  static const GATT_REQUEST_NOT_SUPPORTED = 6;

  /// from: static public final int GATT_SUCCESS
  static const GATT_SUCCESS = 0;

  /// from: static public final int GATT_WRITE_NOT_PERMITTED
  static const GATT_WRITE_NOT_PERMITTED = 3;
  static final _id_close = _class.instanceMethodId(
    r"close",
    r"()V",
  );

  static final _close = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void close()
  void close() {
    _close(reference.pointer, _id_close as jni.JMethodIDPtr).check();
  }

  static final _id_disconnect = _class.instanceMethodId(
    r"disconnect",
    r"()V",
  );

  static final _disconnect = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void disconnect()
  void disconnect() {
    _disconnect(reference.pointer, _id_disconnect as jni.JMethodIDPtr).check();
  }

  static final _id_connect = _class.instanceMethodId(
    r"connect",
    r"()Z",
  );

  static final _connect = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean connect()
  bool connect() {
    return _connect(reference.pointer, _id_connect as jni.JMethodIDPtr).boolean;
  }

  static final _id_setPreferredPhy = _class.instanceMethodId(
    r"setPreferredPhy",
    r"(III)V",
  );

  static final _setPreferredPhy = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Int64, ffi.Int64)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int)>();

  /// from: public void setPreferredPhy(int i, int i1, int i2)
  void setPreferredPhy(
    int i,
    int i1,
    int i2,
  ) {
    _setPreferredPhy(reference.pointer, _id_setPreferredPhy as jni.JMethodIDPtr,
            i, i1, i2)
        .check();
  }

  static final _id_readPhy = _class.instanceMethodId(
    r"readPhy",
    r"()V",
  );

  static final _readPhy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void readPhy()
  void readPhy() {
    _readPhy(reference.pointer, _id_readPhy as jni.JMethodIDPtr).check();
  }

  static final _id_getDevice = _class.instanceMethodId(
    r"getDevice",
    r"()Landroid/bluetooth/BluetoothDevice;",
  );

  static final _getDevice = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.bluetooth.BluetoothDevice getDevice()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDevice() {
    return _getDevice(reference.pointer, _id_getDevice as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_discoverServices = _class.instanceMethodId(
    r"discoverServices",
    r"()Z",
  );

  static final _discoverServices = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean discoverServices()
  bool discoverServices() {
    return _discoverServices(
            reference.pointer, _id_discoverServices as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getServices = _class.instanceMethodId(
    r"getServices",
    r"()Ljava/util/List;",
  );

  static final _getServices = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.List getServices()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getServices() {
    return _getServices(reference.pointer, _id_getServices as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getService = _class.instanceMethodId(
    r"getService",
    r"(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattService;",
  );

  static final _getService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.bluetooth.BluetoothGattService getService(java.util.UUID uUID)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getService(
    jni.JObject uUID,
  ) {
    return _getService(reference.pointer, _id_getService as jni.JMethodIDPtr,
            uUID.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_readCharacteristic = _class.instanceMethodId(
    r"readCharacteristic",
    r"(Landroid/bluetooth/BluetoothGattCharacteristic;)Z",
  );

  static final _readCharacteristic = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic bluetoothGattCharacteristic)
  bool readCharacteristic(
    jni.JObject bluetoothGattCharacteristic,
  ) {
    return _readCharacteristic(
            reference.pointer,
            _id_readCharacteristic as jni.JMethodIDPtr,
            bluetoothGattCharacteristic.reference.pointer)
        .boolean;
  }

  static final _id_writeCharacteristic = _class.instanceMethodId(
    r"writeCharacteristic",
    r"(Landroid/bluetooth/BluetoothGattCharacteristic;)Z",
  );

  static final _writeCharacteristic = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic bluetoothGattCharacteristic)
  bool writeCharacteristic(
    jni.JObject bluetoothGattCharacteristic,
  ) {
    return _writeCharacteristic(
            reference.pointer,
            _id_writeCharacteristic as jni.JMethodIDPtr,
            bluetoothGattCharacteristic.reference.pointer)
        .boolean;
  }

  static final _id_writeCharacteristic1 = _class.instanceMethodId(
    r"writeCharacteristic",
    r"(Landroid/bluetooth/BluetoothGattCharacteristic;[BI)I",
  );

  static final _writeCharacteristic1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public int writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic bluetoothGattCharacteristic, byte[] bs, int i)
  int writeCharacteristic1(
    jni.JObject bluetoothGattCharacteristic,
    jni.JArray<jni.jbyte> bs,
    int i,
  ) {
    return _writeCharacteristic1(
            reference.pointer,
            _id_writeCharacteristic1 as jni.JMethodIDPtr,
            bluetoothGattCharacteristic.reference.pointer,
            bs.reference.pointer,
            i)
        .integer;
  }

  static final _id_readDescriptor = _class.instanceMethodId(
    r"readDescriptor",
    r"(Landroid/bluetooth/BluetoothGattDescriptor;)Z",
  );

  static final _readDescriptor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor bluetoothGattDescriptor)
  bool readDescriptor(
    jni.JObject bluetoothGattDescriptor,
  ) {
    return _readDescriptor(
            reference.pointer,
            _id_readDescriptor as jni.JMethodIDPtr,
            bluetoothGattDescriptor.reference.pointer)
        .boolean;
  }

  static final _id_writeDescriptor = _class.instanceMethodId(
    r"writeDescriptor",
    r"(Landroid/bluetooth/BluetoothGattDescriptor;)Z",
  );

  static final _writeDescriptor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor bluetoothGattDescriptor)
  bool writeDescriptor(
    jni.JObject bluetoothGattDescriptor,
  ) {
    return _writeDescriptor(
            reference.pointer,
            _id_writeDescriptor as jni.JMethodIDPtr,
            bluetoothGattDescriptor.reference.pointer)
        .boolean;
  }

  static final _id_writeDescriptor1 = _class.instanceMethodId(
    r"writeDescriptor",
    r"(Landroid/bluetooth/BluetoothGattDescriptor;[B)I",
  );

  static final _writeDescriptor1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int writeDescriptor(android.bluetooth.BluetoothGattDescriptor bluetoothGattDescriptor, byte[] bs)
  int writeDescriptor1(
    jni.JObject bluetoothGattDescriptor,
    jni.JArray<jni.jbyte> bs,
  ) {
    return _writeDescriptor1(
            reference.pointer,
            _id_writeDescriptor1 as jni.JMethodIDPtr,
            bluetoothGattDescriptor.reference.pointer,
            bs.reference.pointer)
        .integer;
  }

  static final _id_beginReliableWrite = _class.instanceMethodId(
    r"beginReliableWrite",
    r"()Z",
  );

  static final _beginReliableWrite = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean beginReliableWrite()
  bool beginReliableWrite() {
    return _beginReliableWrite(
            reference.pointer, _id_beginReliableWrite as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_executeReliableWrite = _class.instanceMethodId(
    r"executeReliableWrite",
    r"()Z",
  );

  static final _executeReliableWrite = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean executeReliableWrite()
  bool executeReliableWrite() {
    return _executeReliableWrite(
            reference.pointer, _id_executeReliableWrite as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_abortReliableWrite = _class.instanceMethodId(
    r"abortReliableWrite",
    r"()V",
  );

  static final _abortReliableWrite = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void abortReliableWrite()
  void abortReliableWrite() {
    _abortReliableWrite(
            reference.pointer, _id_abortReliableWrite as jni.JMethodIDPtr)
        .check();
  }

  static final _id_abortReliableWrite1 = _class.instanceMethodId(
    r"abortReliableWrite",
    r"(Landroid/bluetooth/BluetoothDevice;)V",
  );

  static final _abortReliableWrite1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void abortReliableWrite(android.bluetooth.BluetoothDevice bluetoothDevice)
  void abortReliableWrite1(
    jni.JObject bluetoothDevice,
  ) {
    _abortReliableWrite1(
            reference.pointer,
            _id_abortReliableWrite1 as jni.JMethodIDPtr,
            bluetoothDevice.reference.pointer)
        .check();
  }

  static final _id_setCharacteristicNotification = _class.instanceMethodId(
    r"setCharacteristicNotification",
    r"(Landroid/bluetooth/BluetoothGattCharacteristic;Z)Z",
  );

  static final _setCharacteristicNotification = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic bluetoothGattCharacteristic, boolean z)
  bool setCharacteristicNotification(
    jni.JObject bluetoothGattCharacteristic,
    bool z,
  ) {
    return _setCharacteristicNotification(
            reference.pointer,
            _id_setCharacteristicNotification as jni.JMethodIDPtr,
            bluetoothGattCharacteristic.reference.pointer,
            z ? 1 : 0)
        .boolean;
  }

  static final _id_readRemoteRssi = _class.instanceMethodId(
    r"readRemoteRssi",
    r"()Z",
  );

  static final _readRemoteRssi = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean readRemoteRssi()
  bool readRemoteRssi() {
    return _readRemoteRssi(
            reference.pointer, _id_readRemoteRssi as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_requestMtu = _class.instanceMethodId(
    r"requestMtu",
    r"(I)Z",
  );

  static final _requestMtu = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public boolean requestMtu(int i)
  bool requestMtu(
    int i,
  ) {
    return _requestMtu(reference.pointer, _id_requestMtu as jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_requestConnectionPriority = _class.instanceMethodId(
    r"requestConnectionPriority",
    r"(I)Z",
  );

  static final _requestConnectionPriority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public boolean requestConnectionPriority(int i)
  bool requestConnectionPriority(
    int i,
  ) {
    return _requestConnectionPriority(reference.pointer,
            _id_requestConnectionPriority as jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_getConnectionState = _class.instanceMethodId(
    r"getConnectionState",
    r"(Landroid/bluetooth/BluetoothDevice;)I",
  );

  static final _getConnectionState = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int getConnectionState(android.bluetooth.BluetoothDevice bluetoothDevice)
  int getConnectionState(
    jni.JObject bluetoothDevice,
  ) {
    return _getConnectionState(
            reference.pointer,
            _id_getConnectionState as jni.JMethodIDPtr,
            bluetoothDevice.reference.pointer)
        .integer;
  }

  static final _id_getConnectedDevices = _class.instanceMethodId(
    r"getConnectedDevices",
    r"()Ljava/util/List;",
  );

  static final _getConnectedDevices = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.List getConnectedDevices()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getConnectedDevices() {
    return _getConnectedDevices(
            reference.pointer, _id_getConnectedDevices as jni.JMethodIDPtr)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getDevicesMatchingConnectionStates = _class.instanceMethodId(
    r"getDevicesMatchingConnectionStates",
    r"([I)Ljava/util/List;",
  );

  static final _getDevicesMatchingConnectionStates =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List getDevicesMatchingConnectionStates(java.lang.Object[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> getDevicesMatchingConnectionStates(
    jni.JArray<jni.jint> is0,
  ) {
    return _getDevicesMatchingConnectionStates(
            reference.pointer,
            _id_getDevicesMatchingConnectionStates as jni.JMethodIDPtr,
            is0.reference.pointer)
        .object(const jni.JListType(jni.JObjectType()));
  }
}

final class $BluetoothGattType extends jni.JObjType<BluetoothGatt> {
  const $BluetoothGattType();

  @override
  String get signature => r"Landroid/bluetooth/BluetoothGatt;";

  @override
  BluetoothGatt fromReference(jni.JReference reference) =>
      BluetoothGatt.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BluetoothGattType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothGattType) &&
        other is $BluetoothGattType;
  }
}
