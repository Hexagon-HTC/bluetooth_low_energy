// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum BluetoothLowEnergyStateArgs {
  unknown,
  unsupported,
  unauthorized,
  off,
  turningOn,
  on,
  turningOff,
}

enum GattCharacteristicPropertyArgs {
  read,
  write,
  writeWithoutResponse,
  notify,
  indicate,
}

enum GattCharacteristicWriteTypeArgs {
  withResponse,
  withoutResponse,
}

enum GattCharacteristicNotifyStateArgs {
  none,
  notify,
  indicate,
}

enum GattStatusArgs {
  success,
  readNotPermitted,
  writeNotPermitted,
  requestNotSupported,
  invalidOffset,
  insufficientAuthentication,
  insufficientEncryption,
  invalidAttributeLength,
  connectionCongested,
  failure,
}

class ManufacturerSpecificDataArgs {
  ManufacturerSpecificDataArgs({
    required this.idArgs,
    required this.dataArgs,
  });

  int idArgs;

  Uint8List dataArgs;

  Object encode() {
    return <Object?>[
      idArgs,
      dataArgs,
    ];
  }

  static ManufacturerSpecificDataArgs decode(Object result) {
    result as List<Object?>;
    return ManufacturerSpecificDataArgs(
      idArgs: result[0]! as int,
      dataArgs: result[1]! as Uint8List,
    );
  }
}

class AdvertisementArgs {
  AdvertisementArgs({
    this.nameArgs,
    required this.serviceUUIDsArgs,
    required this.serviceDataArgs,
    this.manufacturerSpecificDataArgs,
  });

  String? nameArgs;

  List<String?> serviceUUIDsArgs;

  Map<String?, Uint8List?> serviceDataArgs;

  ManufacturerSpecificDataArgs? manufacturerSpecificDataArgs;

  Object encode() {
    return <Object?>[
      nameArgs,
      serviceUUIDsArgs,
      serviceDataArgs,
      manufacturerSpecificDataArgs?.encode(),
    ];
  }

  static AdvertisementArgs decode(Object result) {
    result as List<Object?>;
    return AdvertisementArgs(
      nameArgs: result[0] as String?,
      serviceUUIDsArgs: (result[1] as List<Object?>?)!.cast<String?>(),
      serviceDataArgs: (result[2] as Map<Object?, Object?>?)!.cast<String?, Uint8List?>(),
      manufacturerSpecificDataArgs: result[3] != null
          ? ManufacturerSpecificDataArgs.decode(result[3]! as List<Object?>)
          : null,
    );
  }
}

class CentralArgs {
  CentralArgs({
    required this.addressArgs,
  });

  String addressArgs;

  Object encode() {
    return <Object?>[
      addressArgs,
    ];
  }

  static CentralArgs decode(Object result) {
    result as List<Object?>;
    return CentralArgs(
      addressArgs: result[0]! as String,
    );
  }
}

class PeripheralArgs {
  PeripheralArgs({
    required this.addressArgs,
  });

  String addressArgs;

  Object encode() {
    return <Object?>[
      addressArgs,
    ];
  }

  static PeripheralArgs decode(Object result) {
    result as List<Object?>;
    return PeripheralArgs(
      addressArgs: result[0]! as String,
    );
  }
}

class GattDescriptorArgs {
  GattDescriptorArgs({
    required this.hashCodeArgs,
    required this.uuidArgs,
    this.valueArgs,
  });

  int hashCodeArgs;

  String uuidArgs;

  Uint8List? valueArgs;

  Object encode() {
    return <Object?>[
      hashCodeArgs,
      uuidArgs,
      valueArgs,
    ];
  }

  static GattDescriptorArgs decode(Object result) {
    result as List<Object?>;
    return GattDescriptorArgs(
      hashCodeArgs: result[0]! as int,
      uuidArgs: result[1]! as String,
      valueArgs: result[2] as Uint8List?,
    );
  }
}

class GattCharacteristicArgs {
  GattCharacteristicArgs({
    required this.hashCodeArgs,
    required this.uuidArgs,
    required this.propertyNumbersArgs,
    required this.descriptorsArgs,
  });

  int hashCodeArgs;

  String uuidArgs;

  List<int?> propertyNumbersArgs;

  List<GattDescriptorArgs?> descriptorsArgs;

  Object encode() {
    return <Object?>[
      hashCodeArgs,
      uuidArgs,
      propertyNumbersArgs,
      descriptorsArgs,
    ];
  }

  static GattCharacteristicArgs decode(Object result) {
    result as List<Object?>;
    return GattCharacteristicArgs(
      hashCodeArgs: result[0]! as int,
      uuidArgs: result[1]! as String,
      propertyNumbersArgs: (result[2] as List<Object?>?)!.cast<int?>(),
      descriptorsArgs: (result[3] as List<Object?>?)!.cast<GattDescriptorArgs?>(),
    );
  }
}

class GattServiceArgs {
  GattServiceArgs({
    required this.hashCodeArgs,
    required this.uuidArgs,
    required this.characteristicsArgs,
  });

  int hashCodeArgs;

  String uuidArgs;

  List<GattCharacteristicArgs?> characteristicsArgs;

  Object encode() {
    return <Object?>[
      hashCodeArgs,
      uuidArgs,
      characteristicsArgs,
    ];
  }

  static GattServiceArgs decode(Object result) {
    result as List<Object?>;
    return GattServiceArgs(
      hashCodeArgs: result[0]! as int,
      uuidArgs: result[1]! as String,
      characteristicsArgs: (result[2] as List<Object?>?)!.cast<GattCharacteristicArgs?>(),
    );
  }
}

class _CentralManagerCommandChannelCodec extends StandardMessageCodec {
  const _CentralManagerCommandChannelCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is GattCharacteristicArgs) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is GattDescriptorArgs) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is GattServiceArgs) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PeripheralArgs) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return GattCharacteristicArgs.decode(readValue(buffer)!);
      case 129: 
        return GattDescriptorArgs.decode(readValue(buffer)!);
      case 130: 
        return GattServiceArgs.decode(readValue(buffer)!);
      case 131: 
        return PeripheralArgs.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class CentralManagerCommandChannel {
  /// Constructor for [CentralManagerCommandChannel].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CentralManagerCommandChannel({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _CentralManagerCommandChannelCodec();

  final String __pigeon_messageChannelSuffix;

  Future<void> initialize() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerCommandChannel.initialize$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> requestPermission() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerCommandChannel.requestPermission$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<void> startDiscovery(List<String?> serviceUUIDsArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerCommandChannel.startDiscovery$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[serviceUUIDsArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopDiscovery() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerCommandChannel.stopDiscovery$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> connect(String addressArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerCommandChannel.connect$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disconnect(String addressArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerCommandChannel.disconnect$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<PeripheralArgs?>> retrieveConnectedPeripherals() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerCommandChannel.retrieveConnectedPeripherals$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<PeripheralArgs?>();
    }
  }

  Future<int> requestMTU(String addressArgs, int mtuArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerCommandChannel.requestMTU$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, mtuArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<int> readRSSI(String addressArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerCommandChannel.readRSSI$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<List<GattServiceArgs?>> discoverServices(String addressArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerCommandChannel.discoverServices$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<GattServiceArgs?>();
    }
  }

  Future<Uint8List> readCharacteristic(String addressArgs, int hashCodeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerCommandChannel.readCharacteristic$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, hashCodeArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<void> writeCharacteristic(String addressArgs, int hashCodeArgs, Uint8List valueArgs, int typeNumberArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerCommandChannel.writeCharacteristic$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, hashCodeArgs, valueArgs, typeNumberArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setCharacteristicNotifyState(String addressArgs, int hashCodeArgs, int stateNumberArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerCommandChannel.setCharacteristicNotifyState$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, hashCodeArgs, stateNumberArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> readDescriptor(String addressArgs, int hashCodeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerCommandChannel.readDescriptor$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, hashCodeArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<void> writeDescriptor(String addressArgs, int hashCodeArgs, Uint8List valueArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerCommandChannel.writeDescriptor$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, hashCodeArgs, valueArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _CentralManagerEventChannelCodec extends StandardMessageCodec {
  const _CentralManagerEventChannelCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AdvertisementArgs) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ManufacturerSpecificDataArgs) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PeripheralArgs) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AdvertisementArgs.decode(readValue(buffer)!);
      case 129: 
        return ManufacturerSpecificDataArgs.decode(readValue(buffer)!);
      case 130: 
        return PeripheralArgs.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class CentralManagerEventChannel {
  static const MessageCodec<Object?> pigeonChannelCodec = _CentralManagerEventChannelCodec();

  void onStateChanged(int stateNumberArgs);

  void onDiscovered(PeripheralArgs peripheralArgs, int rssiArgs, AdvertisementArgs advertisementArgs);

  void onConnectionStateChanged(String addressArgs, bool stateArgs);

  void onMtuChanged(String addressArgs, int mtuArgs);

  void onCharacteristicNotified(String addressArgs, int hashCodeArgs, Uint8List valueArgs);

  static void setUp(CentralManagerEventChannel? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_stateNumberArgs = (args[0] as int?);
          assert(arg_stateNumberArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onStateChanged was null, expected non-null int.');
          try {
            api.onStateChanged(arg_stateNumberArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onDiscovered$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onDiscovered was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PeripheralArgs? arg_peripheralArgs = (args[0] as PeripheralArgs?);
          assert(arg_peripheralArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onDiscovered was null, expected non-null PeripheralArgs.');
          final int? arg_rssiArgs = (args[1] as int?);
          assert(arg_rssiArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onDiscovered was null, expected non-null int.');
          final AdvertisementArgs? arg_advertisementArgs = (args[2] as AdvertisementArgs?);
          assert(arg_advertisementArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onDiscovered was null, expected non-null AdvertisementArgs.');
          try {
            api.onDiscovered(arg_peripheralArgs!, arg_rssiArgs!, arg_advertisementArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onConnectionStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onConnectionStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_addressArgs = (args[0] as String?);
          assert(arg_addressArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onConnectionStateChanged was null, expected non-null String.');
          final bool? arg_stateArgs = (args[1] as bool?);
          assert(arg_stateArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onConnectionStateChanged was null, expected non-null bool.');
          try {
            api.onConnectionStateChanged(arg_addressArgs!, arg_stateArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onMtuChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onMtuChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_addressArgs = (args[0] as String?);
          assert(arg_addressArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onMtuChanged was null, expected non-null String.');
          final int? arg_mtuArgs = (args[1] as int?);
          assert(arg_mtuArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onMtuChanged was null, expected non-null int.');
          try {
            api.onMtuChanged(arg_addressArgs!, arg_mtuArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onCharacteristicNotified$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onCharacteristicNotified was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_addressArgs = (args[0] as String?);
          assert(arg_addressArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onCharacteristicNotified was null, expected non-null String.');
          final int? arg_hashCodeArgs = (args[1] as int?);
          assert(arg_hashCodeArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onCharacteristicNotified was null, expected non-null int.');
          final Uint8List? arg_valueArgs = (args[2] as Uint8List?);
          assert(arg_valueArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.CentralManagerEventChannel.onCharacteristicNotified was null, expected non-null Uint8List.');
          try {
            api.onCharacteristicNotified(arg_addressArgs!, arg_hashCodeArgs!, arg_valueArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class _PeripheralManagerCommandChannelCodec extends StandardMessageCodec {
  const _PeripheralManagerCommandChannelCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AdvertisementArgs) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is GattCharacteristicArgs) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is GattDescriptorArgs) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is GattServiceArgs) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is ManufacturerSpecificDataArgs) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AdvertisementArgs.decode(readValue(buffer)!);
      case 129: 
        return GattCharacteristicArgs.decode(readValue(buffer)!);
      case 130: 
        return GattDescriptorArgs.decode(readValue(buffer)!);
      case 131: 
        return GattServiceArgs.decode(readValue(buffer)!);
      case 132: 
        return ManufacturerSpecificDataArgs.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class PeripheralManagerCommandChannel {
  /// Constructor for [PeripheralManagerCommandChannel].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PeripheralManagerCommandChannel({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PeripheralManagerCommandChannelCodec();

  final String __pigeon_messageChannelSuffix;

  Future<void> initialize() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerCommandChannel.initialize$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addService(GattServiceArgs serviceArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerCommandChannel.addService$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[serviceArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeService(int hashCodeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerCommandChannel.removeService$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[hashCodeArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> clearServices() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerCommandChannel.clearServices$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startAdvertising(AdvertisementArgs advertisementArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerCommandChannel.startAdvertising$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[advertisementArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopAdvertising() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerCommandChannel.stopAdvertising$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> sendResponse(String addressArgs, int idArgs, int statusNumberArgs, int offsetArgs, Uint8List? valueArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerCommandChannel.sendResponse$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, idArgs, statusNumberArgs, offsetArgs, valueArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> notifyCharacteristicChanged(int hashCodeArgs, Uint8List valueArgs, bool confirmArgs, String addressArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerCommandChannel.notifyCharacteristicChanged$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[hashCodeArgs, valueArgs, confirmArgs, addressArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _PeripheralManagerEventChannelCodec extends StandardMessageCodec {
  const _PeripheralManagerEventChannelCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CentralArgs) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return CentralArgs.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class PeripheralManagerEventChannel {
  static const MessageCodec<Object?> pigeonChannelCodec = _PeripheralManagerEventChannelCodec();

  void onStateChanged(int stateNumberArgs);

  void onConnectionStateChanged(CentralArgs centralArgs, bool stateArgs);

  void onMtuChanged(String addressArgs, int mtuArgs);

  void onCharacteristicReadRequest(String addressArgs, int hashCodeArgs, int idArgs, int offsetArgs);

  void onCharacteristicWriteRequest(String addressArgs, int hashCodeArgs, int idArgs, int offsetArgs, Uint8List valueArgs, bool preparedWriteArgs, bool responseNeededArgs);

  void onCharacteristicNotifyStateChanged(String addressArgs, int hashCodeArgs, int stateNumberArgs);

  void onDescriptorReadRequest(String addressArgs, int hashCodeArgs, int idArgs, int offsetArgs);

  void onDescriptorWriteRequest(String addressArgs, int hashCodeArgs, int idArgs, int offsetArgs, Uint8List valueArgs, bool preparedWriteArgs, bool responseNeededArgs);

  void onExecuteWrite(String addressArgs, int idArgs, bool executeArgs);

  static void setUp(PeripheralManagerEventChannel? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_stateNumberArgs = (args[0] as int?);
          assert(arg_stateNumberArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onStateChanged was null, expected non-null int.');
          try {
            api.onStateChanged(arg_stateNumberArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onConnectionStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onConnectionStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CentralArgs? arg_centralArgs = (args[0] as CentralArgs?);
          assert(arg_centralArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onConnectionStateChanged was null, expected non-null CentralArgs.');
          final bool? arg_stateArgs = (args[1] as bool?);
          assert(arg_stateArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onConnectionStateChanged was null, expected non-null bool.');
          try {
            api.onConnectionStateChanged(arg_centralArgs!, arg_stateArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onMtuChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onMtuChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_addressArgs = (args[0] as String?);
          assert(arg_addressArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onMtuChanged was null, expected non-null String.');
          final int? arg_mtuArgs = (args[1] as int?);
          assert(arg_mtuArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onMtuChanged was null, expected non-null int.');
          try {
            api.onMtuChanged(arg_addressArgs!, arg_mtuArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicReadRequest$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicReadRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_addressArgs = (args[0] as String?);
          assert(arg_addressArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicReadRequest was null, expected non-null String.');
          final int? arg_hashCodeArgs = (args[1] as int?);
          assert(arg_hashCodeArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicReadRequest was null, expected non-null int.');
          final int? arg_idArgs = (args[2] as int?);
          assert(arg_idArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicReadRequest was null, expected non-null int.');
          final int? arg_offsetArgs = (args[3] as int?);
          assert(arg_offsetArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicReadRequest was null, expected non-null int.');
          try {
            api.onCharacteristicReadRequest(arg_addressArgs!, arg_hashCodeArgs!, arg_idArgs!, arg_offsetArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicWriteRequest$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicWriteRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_addressArgs = (args[0] as String?);
          assert(arg_addressArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicWriteRequest was null, expected non-null String.');
          final int? arg_hashCodeArgs = (args[1] as int?);
          assert(arg_hashCodeArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicWriteRequest was null, expected non-null int.');
          final int? arg_idArgs = (args[2] as int?);
          assert(arg_idArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicWriteRequest was null, expected non-null int.');
          final int? arg_offsetArgs = (args[3] as int?);
          assert(arg_offsetArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicWriteRequest was null, expected non-null int.');
          final Uint8List? arg_valueArgs = (args[4] as Uint8List?);
          assert(arg_valueArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicWriteRequest was null, expected non-null Uint8List.');
          final bool? arg_preparedWriteArgs = (args[5] as bool?);
          assert(arg_preparedWriteArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicWriteRequest was null, expected non-null bool.');
          final bool? arg_responseNeededArgs = (args[6] as bool?);
          assert(arg_responseNeededArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicWriteRequest was null, expected non-null bool.');
          try {
            api.onCharacteristicWriteRequest(arg_addressArgs!, arg_hashCodeArgs!, arg_idArgs!, arg_offsetArgs!, arg_valueArgs!, arg_preparedWriteArgs!, arg_responseNeededArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicNotifyStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicNotifyStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_addressArgs = (args[0] as String?);
          assert(arg_addressArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicNotifyStateChanged was null, expected non-null String.');
          final int? arg_hashCodeArgs = (args[1] as int?);
          assert(arg_hashCodeArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicNotifyStateChanged was null, expected non-null int.');
          final int? arg_stateNumberArgs = (args[2] as int?);
          assert(arg_stateNumberArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onCharacteristicNotifyStateChanged was null, expected non-null int.');
          try {
            api.onCharacteristicNotifyStateChanged(arg_addressArgs!, arg_hashCodeArgs!, arg_stateNumberArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onDescriptorReadRequest$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onDescriptorReadRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_addressArgs = (args[0] as String?);
          assert(arg_addressArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onDescriptorReadRequest was null, expected non-null String.');
          final int? arg_hashCodeArgs = (args[1] as int?);
          assert(arg_hashCodeArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onDescriptorReadRequest was null, expected non-null int.');
          final int? arg_idArgs = (args[2] as int?);
          assert(arg_idArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onDescriptorReadRequest was null, expected non-null int.');
          final int? arg_offsetArgs = (args[3] as int?);
          assert(arg_offsetArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onDescriptorReadRequest was null, expected non-null int.');
          try {
            api.onDescriptorReadRequest(arg_addressArgs!, arg_hashCodeArgs!, arg_idArgs!, arg_offsetArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onDescriptorWriteRequest$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onDescriptorWriteRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_addressArgs = (args[0] as String?);
          assert(arg_addressArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onDescriptorWriteRequest was null, expected non-null String.');
          final int? arg_hashCodeArgs = (args[1] as int?);
          assert(arg_hashCodeArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onDescriptorWriteRequest was null, expected non-null int.');
          final int? arg_idArgs = (args[2] as int?);
          assert(arg_idArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onDescriptorWriteRequest was null, expected non-null int.');
          final int? arg_offsetArgs = (args[3] as int?);
          assert(arg_offsetArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onDescriptorWriteRequest was null, expected non-null int.');
          final Uint8List? arg_valueArgs = (args[4] as Uint8List?);
          assert(arg_valueArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onDescriptorWriteRequest was null, expected non-null Uint8List.');
          final bool? arg_preparedWriteArgs = (args[5] as bool?);
          assert(arg_preparedWriteArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onDescriptorWriteRequest was null, expected non-null bool.');
          final bool? arg_responseNeededArgs = (args[6] as bool?);
          assert(arg_responseNeededArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onDescriptorWriteRequest was null, expected non-null bool.');
          try {
            api.onDescriptorWriteRequest(arg_addressArgs!, arg_hashCodeArgs!, arg_idArgs!, arg_offsetArgs!, arg_valueArgs!, arg_preparedWriteArgs!, arg_responseNeededArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onExecuteWrite$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onExecuteWrite was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_addressArgs = (args[0] as String?);
          assert(arg_addressArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onExecuteWrite was null, expected non-null String.');
          final int? arg_idArgs = (args[1] as int?);
          assert(arg_idArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onExecuteWrite was null, expected non-null int.');
          final bool? arg_executeArgs = (args[2] as bool?);
          assert(arg_executeArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_android.PeripheralManagerEventChannel.onExecuteWrite was null, expected non-null bool.');
          try {
            api.onExecuteWrite(arg_addressArgs!, arg_idArgs!, arg_executeArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
